/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Czech Linux keyboard
#include "keys_cs.h"

// Layer numbers
#define USDEF 0
#define USNUM 1
#define USNAV 2
#define USFUN 3
#define USADJ 4
#define CSDEF 5
#define CSDIA 6
#define CSDII 7
#define CSNUM 8
#define CSNAV 9
#define CSFUN 10
#define CSADJ 11

// Other number definitions
#define TAPPING_TERM 150
#define SHIFT_TAP_MS 170
#define QUICK_TAP_MS 110
#define PRIOR_IDLE_MS 150
#define COMBO_TIME_MS 25

// Behavior customizations
// settings and homerow mods inspired by https://github.com/urob/zmk-config/

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl {
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
    quick_tap_ms = <QUICK_TAP_MS>;
};

// ZMK feature macros
// https://github.com/filterpaper/zmk-config

//additional  arguments for hold-trigger-key-positions and hold-trigger-on-release
// customizable hold-tap for keypress
#define HTK(name, tap_flavor, tap_term, ...)  \
name: name##_hold_tap {                       \
    label           = #name;                  \
    flavor          = #tap_flavor;            \
    compatible      = "zmk,behavior-hold-tap";\
    tapping-term-ms = <tap_term>;             \
    quick-tap-ms    = <QUICK_TAP_MS>;         \
    require-prior-idle-ms = <PRIOR_IDLE_MS>;  \
    #binding-cells  = <2>;                    \
    bindings        = <&kp>, <&kp>;           \
    __VA_ARGS__                               \
};

// customizeble hold-tap for any behavior
#define HTMOSL(name, tap_flavor, tap_term, ...) \
name: name##_hold_tap {                       \
    label           = #name;                  \
    flavor          = #tap_flavor;            \
    compatible      = "zmk,behavior-hold-tap";\
    tapping-term-ms = <tap_term>;             \
    quick-tap-ms    = <QUICK_TAP_MS>;         \
    require-prior-idle-ms = <PRIOR_IDLE_MS>;  \
    #binding-cells = <2>;                     \
    bindings        = <&mo>, <&sl>;           \
    __VA_ARGS__                               \
};

// one-line combos
#define COMBO(name, pos, lrs, kp)    \
combo_##name {                       \
    timeout-ms    = <25>; \
    bindings      = <kp>;            \
    key-positions = <pos>;           \
    layers        = <lrs>;           \
};

// one-line macros
#define MACRO(name, ...)                  \
name: name##_macro {                      \
    label          = #name;               \
    compatible     = "zmk,behavior-macro";\
    tap-ms         = <1>;                 \
    wait-ms        = <1>;                 \
    #binding-cells = <0>;                 \
    bindings       = __VA_ARGS__          \
};

/ {
    macros {
        // Czech symbols
        MACRO(cs_t_caron, <&macro_tap &kp CS_CARON &kp CS_T>;)
        MACRO(cs_n_caron, <&macro_tap &kp CS_CARON &kp CS_N>;)
        MACRO(cs_d_caron, <&macro_tap &kp CS_CARON &kp CS_D>;)
        MACRO(cs_o_acute, <&macro_tap &kp CS_ACUTE &kp CS_O>;)
        // Emacs convenience macros
        MACRO(emacs_c_x, <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>;)
        MACRO(emacs_c_y, <&macro_press &kp LCTRL>, <&macro_tap &kp Y>, <&macro_release &kp LCTRL>;)
        MACRO(emacs_c_z, <&macro_press &kp LCTRL>, <&macro_tap &kp Y>, <&macro_release &kp LCTRL>;)
        MACRO(emacs_c_x_e, <&macro_press &kp LCTRL> , <&macro_tap &kp X> , <&macro_release &kp LCTRL> , <&macro_tap &kp E>;)
        MACRO(emacs_c_w, <&macro_press &kp LCTRL> , <&macro_tap &kp W> , <&macro_release &kp LCTRL>;)
        MACRO(emacs_c_x_u, <&macro_press &kp LCTRL> , <&macro_tap &kp X> , <&macro_release &kp LCTRL> , <&macro_tap &kp U>;)
        MACRO(emacs_c_x_r, <&macro_press &kp LCTRL> , <&macro_tap &kp X> , <&macro_release &kp LCTRL> , <&macro_tap &kp R>;)
        MACRO(emacs_m_x, <&macro_press &kp LALT> , <&macro_tap &kp X> , <&macro_release &kp LALT>;)
        MACRO(emacs_m_w, <&macro_press &kp LALT> , <&macro_tap &kp W> , <&macro_release &kp LALT>;)
        MACRO(emacs_m_y, <&macro_press &kp LALT> , <&macro_tap &kp Y> , <&macro_release &kp LALT>;)
        MACRO(emacs_m_z, <&macro_press &kp LALT> , <&macro_tap &kp Y> , <&macro_release &kp LALT>;)
        // General convenience macros
        MACRO(input_lng, <&macro_press &kp LCTRL> , <&macro_press &kp LALT> , <&macro_tap &kp K> , <&macro_release &kp LCTRL> , <&macro_release &kp LALT>;)
    };

    behaviors {
            HTK(lhrm, balanced, TAPPING_TERM)
                HTK(rhrm, balanced, TAPPING_TERM)
                HTMOSL(ldia_mosl, hold-preferred, TAPPING_TERM)
                HTMOSL(rdia_mosl, hold-preferred, TAPPING_TERM)
            csquote: csquote {
                label          = "csquote";
                compatible     = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings       = <&kp CS_SQT>, <&kp CS_DQT>;
                mods           = <(MOD_LSFT|MOD_RSFT)>;
            };
            csbslh: csbslh {
                label          = "csbslh";
                compatible     = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings       = <&kp CS_BSLH>, <&kp CS_PIPE>;
                mods           = <(MOD_LSFT|MOD_RSFT)>;
            };
            csdot: csdot {
                label          = "csdot";
                compatible     = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings       = <&kp CS_DOT>, <&kp CS_LT>;
                mods           = <(MOD_LSFT|MOD_RSFT)>;
            };
            cscomma: cscomma {
                label          = "cscomma";
                compatible     = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings       = <&kp CS_COMMA>, <&kp CS_GT>;
                mods           = <(MOD_LSFT|MOD_RSFT)>;
            };
            csfslh: csfslh {
                label          = "csfslh";
                compatible     = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings       = <&kp CS_FSLH>, <&kp CS_QMARK>;
                mods           = <(MOD_LSFT|MOD_RSFT)>;
            };
            cssemi: cssemi {
                label          = "cssemi";
                compatible     = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings       = <&kp CS_SEMI>, <&kp CS_COLON>;
                mods           = <(MOD_LSFT|MOD_RSFT)>;
            };
        };

    combos {
        compatible = "zmk,combos";
        COMBO(lag, 40 41, USDEF USNUM CSDEF CSNUM, &kp RALT)
        COMBO(rag, 44 45, USDEF USNUM CSDEF CSNUM, &kp RALT)
        COMBO(csdeflayer, 24 25, USDEF CSDEF, &tog CSDEF)
        COMBO(csdiilayer, 36 37, CSDEF, &tog CSDII)
        COMBO(usnavlayer, 34 35, USDEF, &tog USNAV)
        COMBO(usnumlayer, 22 23, USDEF, &tog USNUM)
        COMBO(usfunlayer, 48 49, USDEF, &tog USFUN)
        COMBO(csnavlayer, 34 35, CSDEF, &tog CSNAV)
        COMBO(csnumlayer, 22 23, CSDEF, &tog CSNUM)
        COMBO(csfunlayer, 48 49, CSDEF, &tog CSFUN)
        COMBO(copy, 27 28, USDEF CSDEF, &kp K_COPY)
        COMBO(paste, 25 26, USDEF CSDEF, &kp K_PASTE)
        COMBO(repeat, 26 27, USDEF CSDEF, &key_repeat)

        COMBO(us_star, 19 31, USDEF, &kp STAR)
        COMBO(us_fslh, 16 28, USDEF, &kp FSLH)
        COMBO(us_plus, 20 32, USDEF, &kp PLUS)
        COMBO(us_minus, 15 27, USDEF, &kp MINUS)
        COMBO(us_caret, 21 33, USDEF, &kp CARET)
        COMBO(us_under, 14 26, USDEF, &kp UNDER)
        COMBO(us_dollar, 22 34, USDEF, &kp DOLLAR)
        COMBO(us_amps, 13 25, USDEF, &kp AMPS)
        COMBO(us_equal, 30 31, USDEF, &kp EQUAL)
        COMBO(us_at, 28 40, USDEF, &kp AT)
        COMBO(us_percent, 27 39, USDEF, &kp PERCENT)
        COMBO(us_tilde, 26 38, USDEF, &kp TILDE)
        COMBO(us_grave, 25 37, USDEF, &kp GRAVE)
        COMBO(us_hash, 31 45, USDEF, &kp HASH)
        COMBO(us_lpar, 31 32, USDEF, &kp LPAR)
        COMBO(us_rpar, 33 34, USDEF, &kp RPAR)
        COMBO(us_lbkt, 19 20, USDEF, &kp LBKT)
        COMBO(us_rbkt, 21 22, USDEF, &kp RBKT)
        COMBO(us_lbrc, 45 46, USDEF, &kp LBRC)
        COMBO(us_rbrc, 47 48, USDEF, &kp RBRC)
        COMBO(us_excl, 13 14, USDEF, &kp EXCL)
        COMBO(us_qmark, 15 16, USDEF, &kp QMARK)

        COMBO(cs_star, 19 31, CSDEF, &kp CS_STAR)
        COMBO(cs_fslh, 16 28, CSDEF, &kp CS_FSLH)
        COMBO(cs_plus, 20 32, CSDEF, &kp CS_PLUS)
        COMBO(cs_minus, 15 27, CSDEF, &kp CS_MINUS)
        COMBO(cs_caret, 21 33, CSDEF, &kp CS_CARET)
        COMBO(cs_under, 14 26, CSDEF, &kp CS_UNDER)
        COMBO(cs_dollar, 22 34, CSDEF, &kp CS_DOLLAR)
        COMBO(cs_amps, 13 25, CSDEF, &kp CS_AMPS)
        COMBO(cs_equal, 30 31, CSDEF, &kp CS_EQUAL)
        COMBO(cs_at, 28 40, CSDEF, &kp CS_AT)
        COMBO(cs_percent, 27 39, CSDEF, &kp CS_PERCENT)
        COMBO(cs_tilde, 26 38, CSDEF, &kp CS_TILDE)
        COMBO(cs_grave, 25 37, CSDEF, &kp CS_GRAVE)
        COMBO(cs_hash, 31 45, CSDEF, &kp CS_HASH)
        COMBO(cs_lpar, 31 32, CSDEF, &kp CS_LPAR)
        COMBO(cs_rpar, 33 34, CSDEF, &kp CS_RPAR)
        COMBO(cs_lbkt, 19 20, CSDEF, &kp CS_LBKT)
        COMBO(cs_rbkt, 21 22, CSDEF, &kp CS_RBKT)
        COMBO(cs_lbrc, 45 46, CSDEF, &kp CS_LBRC)
        COMBO(cs_rbrc, 47 48, CSDEF, &kp CS_RBRC)
        COMBO(cs_excl, 13 14, CSDEF, &kp CS_EXCL)
        COMBO(cs_qmark, 15 16, CSDEF, &kp CS_QMARK)
    };

    keymap {
        compatible = "zmk,keymap";
// Layer list
// 0. default_layer
// 1. us_num_layer
// 2. us_nav_layer
// 3. us_fun_layer
// 4. us_adjust_layer
// 5. cs_base_layer
// 6. cs_dia_layer
// 7. cs_dii_layer
// 8. cs_num_layer
// 9. cs_nav_layer
// 10. cs_fun_layer
// 11. cs_adjust_layer

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  0    |  1  |  2  |  3   |  4   |  5   |          x         |  6   |  7    |  8    |  9   |  10   |  11   |
// |  12   |  13 |  14 |  15  |  16  |  17  |          x         |  18  |  19   |  20   |  21  |  22   |  23   |
// |  24   |  25 |  26 |  27  |  28  |  29  |          x         |  30  |  31   |  32   |  33  |  34   |  35   |
// |  36   |  37 |  38 |  39  |  40  |  41  |  42    | x |  43   |  44  |  45   |  46   |  47  |  48   |  49   |
//               |  50 |  51  |  52  |  53  |  54    | x |  55   |  56  |  57   |  58   |  59  |
//
// ------------------------------------------------------------------------------------------------------------
// |  F1   | F2  | F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |  DEL  |  F  |  Y  |  O   |  U   |  Z   |                   |  W   |  D    |  N    |  L   |   B   | BKSPC |
// |  '↑"  |  H  |  I  |  E   |  A   |  J   |                   |  G   |  T    |  R    |  S   |   P   |  ;↑:  |
// |  \↑|  | .↑< | ,↑> | TAB  |  C   |  V   |   TG   |  |  TG   |  K   |  M    | ESC   |  Q   |   X   |  /↑?  |
//               |     |      | MO   |  MO 1|  SPACE |  | ENTER | MO 5 | MO    |       | GUI  |
            bindings = <
&kp F1   &kp F2          &kp F3       &kp F4        &kp F5        &kp F6                                          &kp F7    &kp F8        &kp F9        &kp F10      &kp F11      &kp F12
&kp DEL  &kp F           &kp Y        &kp O         &kp U         &kp Z                                           &kp W     &kp D         &kp N         &kp L        &kp B        &kp BSPC
&kp SQT  &lhrm LGUI H    &lhrm LALT I &lhrm LCTRL E &lhrm LSHFT A &kp J                                           &kp G     &rhrm LSHFT T &rhrm LCTRL R &rhrm LALT S &rhrm LGUI P &kp SEMI
&kp BSLH &lhrm LCTRL DOT &kp COMMA    &kp TAB       &kp C         &kp V       &emacs_m_x         &emacs_c_x       &kp K     &kp M         &kp ESC       &kp Q        &kp X        &kp FSLH
                         &kp LCTRL    &kp LALT      &tog USNUM    &kp LSHFT   &lt USNAV ENTER    &lt USNUM SPACE  &kp RSHFT &sl USFUN     &kp LALT      &kp LGUI
            >;

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        us_num_layer {
// ------------------------------------------------------------------------------------------------------------
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   $   |  7  |  6  |  5   |  4   |  8   |                   |  ~   |  ^    |  _    |  #   |   |   |   `   |
// |   .   |  3  |  2  |  1   |  0   |  9   |                   |  %   |  (    |  [    |  {   |   \   |   $   |
// |   ,   |  -  |  /  |  +   |  *   |  *   |        |  |       |  @   |  )    |  ]    |  }   |   !   |   &   |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&none      &none         &none         &none          &none          &none                            &none       &none            &none            &none            &none            &none
&kp DOLLAR &kp N7        &kp N6        &kp N5         &kp N4         &kp N8                           &kp TILDE   &kp CARET        &kp UNDER        &kp HASH         &kp PIPE         &kp GRAVE
&kp DOT    &lhrm LGUI N3 &lhrm LALT N2 &lhrm LCTRL N1 &lhrm LSHFT N0 &kp N9                           &kp PERCENT &rhrm LSHFT LPAR &rhrm LCTRL LBKT &rhrm LALT LBRC  &rhrm LGUI BSLH  &kp DOLLAR
&kp COMMA  &kp MINUS     &kp FSLH      &kp PLUS       &kp STAR       &kp EQUAL &emacs_c_x_r &none     &kp AT      &kp RPAR         &kp RBKT         &kp RBRC         &kp EXCL         &kp AMPS
                         &none         &none          &to USDEF      &to USDEF &kp ENTER    &kp SPACE &to USDEF   &to USDEF        &none            &none
            >;

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        us_nav_layer {
                        bindings = <
&none      &none      &none        &none        &none      &none                            &none     &none     &none    &none     &none     &none
&kp C_STOP &kp C_MUTE &kp C_VOL_UP &kp C_VOL_DN &kp C_PLAY &kp C_PAUSE                      &kp INS   &kp HOME  &kp UP   &kp END   &kp PG_UP &kp BSPC
&none      &kp LGUI   &kp LALT     &kp LCTRL    &kp LSHFT  &kp K_CMENU                      &kp CAPS  &kp LEFT  &kp DOWN &kp RIGHT &kp PG_DN &kp ENTER
&kp K_REDO &kp K_UNDO &kp K_CUT    &kp K_PASTE  &kp K_COPY &kp PSCRN   &none      &none     &kp B     &kp H     &kp J    &kp K     &kp L     &kp F
                      &none        &none        &to USDEF  &to USDEF   &kp ENTER  &kp SPACE &to USDEF &to USDEF &none    &none
            >;
        };

        us_fun_layer {
                        bindings = <
&none     &none  &none   &none   &none     &none                           &none       &none      &none      &none      &none      &none
&kp LSHFT &kp F9 &kp F10 &kp F11 &kp F12   &tog USADJ                      &none       &emacs_c_y &emacs_c_w &emacs_m_w &emacs_m_y &none
&kp LCTRL &kp F5 &kp F6  &kp F7  &kp F8    &input_lng                      &emacs_m_x  &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none
&kp LALT  &kp F1 &kp F2  &kp F3  &kp F4    &none      &none     &none      &emacs_c_x  &kp B      &kp N      &kp P      &kp F      &none
                 &none   &none   &to USDEF &to USDEF  &kp ENTER &kp SPACE  &to USDEF   &to USDEF  &none      &none
             >;
        };

        us_adjust_layer {
                        bindings = <
&none       &none        &none        &none        &none        &none                            &none     &none     &none     &none  &none  &none
&bootloader &none        &none        &none        &none        &tog USADJ                       &none     &none     &none     &none  &none  &none
&bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                     &none     &none     &none     &none  &none  &none
&sys_reset  &none        &none        &none        &none        &none        &none     &none     &none     &none     &none     &none  &none  &none
                         &none        &none        &to USDEF    &to USDEF    &to USDEF &to USDEF &to USDEF &to USDEF &none     &none
             >;
        };

        cs_def_layer {
// ------------------------------------------------------------------------------------------------------------
// |  0    |  1  |  2  |  3   |  4   |  5   |          x         |  6   |  7    |  8    |  9   |  10   |  11   |
// |  12   |  13 |  14 |  15  |  16  |  17  |          x         |  18  |  19   |  20   |  21  |  22   |  23   |
// |  24   |  25 |  26 |  27  |  28  |  29  |          x         |  30  |  31   |  32   |  33  |  34   |  35   |
// |  36   |  37 |  38 |  39  |  40  |  41  |  42    | x |  43   |  44  |  45   |  46   |  47  |  48   |  49   |
//               |  50 |  51  |  52  |  53  |  54    | x |  55   |  56  |  57   |  58   |  59  |
//
// ------------------------------------------------------------------------------------------------------------
// |  F1   | F2  | F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |  DEL  |  F  |  Y  |  O   |  U   |  Z   |                   |  W   |  D    |  N    |  L   |   B   | BKSPC |
// |  '↑"  |  H  |  I  |  E   |  A   |  J   |                   |  G   |  T    |  R    |  S   |   P   |  ;↑:  |
// |  \↑|  | .↑< | ,↑> | TAB  |  C   |  V   |   TG   |  |  TG   |  K   |  M    | ESC   |  Q   |   X   |  /↑?  |
//               |     |      | MO   |  MO 1|  SPACE |  | ENTER | MO 5 | MO    |       | GUI  |
            bindings = <
&kp F1      &kp F2             &kp F3          &kp F4           &kp F5                 &kp F6                                     &kp F7    &kp F8                 &kp F9           &kp F10         &kp F11         &kp F12
&kp DEL     &kp CS_F           &kp CS_Y        &lt CSDIA CS_O   &kp CS_U               &kp CS_Z                                   &kp CS_W  &kp CS_D               &lt CSDIA CS_N   &kp CS_L        &kp CS_B        &kp BSPC
&csquote    &lhrm LGUI CS_H    &lhrm LALT CS_I &lhrm LCTRL CS_E &lhrm LSHFT CS_A       &kp CS_J                                   &kp CS_G  &rhrm LSHFT CS_T       &rhrm LCTRL CS_R &rhrm LALT CS_S &rhrm LGUI CS_P &cssemi
&csbslh     &csdot             &cscomma        &kp TAB          &kp CS_C               &kp CS_V  &emacs_m_x      &emacs_c_x       &kp CS_K  &kp CS_M               &kp ESC          &kp CS_Q        &kp CS_X        &csfslh
                               &kp LCTRL       &kp LALT         &ldia_mosl CSFUN CSDIA &kp LSHFT &lt CSNAV ENTER &lt CSNUM SPACE  &kp LSHFT &rdia_mosl CSFUN CSDIA &kp LALT         &kp LGUI
            >;

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        cs_dia_layer {
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |  °  |  ý  |  ó   |  ů   |  ž   |                   |  ú   |  ď   |  ň    |  ẞ   |   ß   | BKSPC |
// |   º   |  é  |  í  |  ě   |  á   |  ´   |                   |  ˇ   |  ť   |  ř    |  š   |   é   |   §   |
// |   ¦   |  ¨  |     |      |  č   |  ı   |                   |  ×   |  ←   |  ↓    |  ↑   |   →   |   ÷   |
//                            |      |      |  SPACE |  | ENTER |      |      |
                         bindings = <
&none             &none            &none          &none          &none          &none                               &none           &none         &none          &none           &none          &none
&kp DEL           &kp CS_DEAD_RING &kp CS_Y_ACUTE &cs_o_acute    &kp CS_U_RING  &kp CS_Z_CARON                      &kp CS_U_ACUTE  &cs_d_caron   &cs_n_caron    &kp CS_SZ_SMALL &kp CS_SZ      &kp BSPC
&kp CS_DEG        &kp CS_E_ACUTE   &kp CS_I_ACUTE &kp CS_E_CARON &kp CS_A_ACUTE &kp CS_ACUTE                        &kp CS_CARON    &cs_t_caron   &kp CS_R_CARON &kp CS_S_CARON  &kp CS_E_ACUTE &kp CS_SECT
&kp CS_PSEUDOPIPE &kp CS_UMLAUT    &none          &none          &kp CS_C_CARON &kp CS_NEGATE                       &kp CS_MULT     &kp CS_LARROW &kp CS_DARROW  &kp CS_UARROW   &kp CS_RARROW  &kp CS_DIV
                                   &none          &none          &to CSDEF      &to CSDEF      &to CSDEF  &to CSDEF &to CSDEF       &to CSDEF     &none          &none
                >;
        };

                cs_dii_layer {
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |  °  |  ¥  |  ø   |  Ø   |      |                   |  đ   |  Ð   |  ¯    |  ł   |   Ł   | BKSPC |
// |   ˝   |  Ħ  |  ˛  |  €   |  Æ   |  ¶   |                   |  ®   |  ‚   |  ‘    |  ’   |   þ   |   Þ   |
// |   `   |  ^  |  ˘  |  ¸   |  ©   |  ˙   |                   |  ŧ   |  Ŧ   |  Ŋ    |  Ω   |   ª   |   ´   |
//                            |      |      |  SPACE |  | ENTER |      |      |
                         bindings = <
&none               &none           &none         &none          &none             &none                                 &none            &none                &none              &none              &none               &none
&kp DEL             &kp CS_RING     &kp CS_YEN    &kp CS_OCROSS  &kp CS_OCROSS_CAP &none                                 &kp CS_D_STROKE  &kp CS_D_STROKE_CAP  &kp CS_BAR_ABOVE   &kp CS_L_STROKE    &kp CS_L_STROKE_CAP &kp BSPC
&kp CS_DOUBLE_ACUTE &kp CS_H_STROKE &kp CS_OGONEK &kp CS_EURO    &kp CS_AE         &kp CS_PARAG                          &kp CS_RMARK     &kp CS_BOTTOM_SQT    &kp CS_UPPER_SQT_L &kp CS_UPPER_SQT_R &kp CS_PLINE        &kp CS_PLINE_CAP
&kp CS_DEAD_GRAVE_L &kp CS_HAT      &kp CS_BREVE  &kp CS_CEDILLA &kp CS_CMARK      &kp CS_DOT_ABOVE                      &kp CS_T_STROKE  &kp CS_T_STROKE_CAP  &kp CS_ETA         &kp CS_OMEGA       &kp CS_A_INDEX      &kp CS_DEAD_GRAVE_R
                                    &none          &none         &to CSDEF         &to CSDEF        &to CSDEF  &to CSDEF &to CSDEF        &to CSDEF            &none              &none
                >;
        };

        cs_num_layer {
// ------------------------------------------------------------------------------------------------------------
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   $   |  7  |  6  |  5   |  4   |  8   |                   |  ~   |  ^    |  _    |  #   |   |   |   `   |
// |   .   |  3  |  2  |  1   |  0   |  9   |                   |  %   |  (    |  [    |  {   |   \   |   $   |
// |   ,   |  -  |  /  |  +   |  *   |  *   |        |  |       |  @   |  )    |  ]    |  }   |   !   |   &   |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&none         &none            &none            &none             &none             &none                               &none          &none               &none            &none              &none               &none
&kp CS_DOLLAR &kp CS_N7        &kp CS_N6        &kp CS_N5         &kp CS_N4         &kp CS_N8                           &kp CS_TILDE   &kp CS_CARET        &kp CS_UNDER     &kp CS_HASH        &kp CS_PIPE         &kp CS_GRAVE
&kp CS_DOT    &lhrm LGUI CS_N3 &lhrm LALT CS_N2 &lhrm LCTRL CS_N1 &lhrm LSHFT CS_N0 &kp CS_N9                           &kp CS_PERCENT &rhrm LSHFT CS_LPAR &rhrm LCTRL LBKT &rhrm LALT CS_LBRC &rhrm LGUI CS_BSLH  &kp CS_DOLLAR
&kp CS_COMMA  &kp CS_MINUS     &kp CS_FSLH      &kp CS_PLUS       &kp CS_STAR       &kp CS_EQUAL &emacs_c_x_r &none     &kp CS_AT      &kp CS_RPAR         &kp CS_RBKT      &kp CS_RBRC        &kp CS_EXCL         &kp CS_AMPS
                               &none            &none             &to CSDEF         &to CSDEF    &kp ENTER    &kp SPACE &to CSDEF      &to CSDEF           &none            &none
            >;

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        cs_nav_layer {
                        bindings = <
&none      &none      &none        &none        &none      &none                            &none     &none     &none    &none     &none     &none
&kp C_STOP &kp C_MUTE &kp C_VOL_UP &kp C_VOL_DN &kp C_PLAY &kp C_PAUSE                      &kp INS   &kp HOME  &kp UP   &kp END   &kp PG_UP &kp BSPC
&none      &kp LGUI   &kp LALT     &kp LCTRL    &kp LSHFT  &kp K_CMENU                      &kp CAPS  &kp LEFT  &kp DOWN &kp RIGHT &kp PG_DN &kp ENTER
&kp K_REDO &kp K_UNDO &kp K_CUT    &kp K_PASTE  &kp K_COPY &kp PSCRN   &none      &none     &kp B     &kp H     &kp J    &kp K     &kp L     &kp F
                      &none        &none        &to CSDEF  &to CSDEF   &kp ENTER  &kp SPACE &to CSDEF &to CSDEF &none    &none
            >;
        };

        cs_fun_layer {
                        bindings = <
&none     &none  &none   &none   &none     &none                           &none       &none      &none      &none      &none      &none
&kp LSHFT &kp F9 &kp F10 &kp F11 &kp F12   &tog USADJ                      &none       &emacs_c_y &emacs_c_w &emacs_m_w &emacs_m_y &none
&kp LCTRL &kp F5 &kp F6  &kp F7  &kp F8    &input_lng                      &emacs_m_x  &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none
&kp LALT  &kp F1 &kp F2  &kp F3  &kp F4    &none      &none     &none      &emacs_c_x  &kp B      &kp N      &kp P      &kp F      &none
                 &none   &none   &to CSDEF &to CSDEF  &kp ENTER &kp SPACE  &to CSDEF   &to CSDEF  &none      &none
             >;
        };

        cs_adjust_layer {
                        bindings = <
&none       &none        &none        &none        &none        &none                            &none     &none     &none     &none  &none  &none
&bootloader &none        &none        &none        &none        &tog USADJ                       &none     &none     &none     &none  &none  &none
&bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                     &none     &none     &none     &none  &none  &none
&sys_reset  &none        &none        &none        &none        &none        &none     &none     &none     &none     &none     &none  &none  &none
                         &none        &none        &to CSDEF    &to CSDEF    &to CSDEF &to CSDEF &to CSDEF &to CSDEF &none     &none
             >;
        };
    };
};
